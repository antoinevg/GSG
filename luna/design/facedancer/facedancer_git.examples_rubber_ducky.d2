facedancer_git: facedancer.git

facedancer_git.examples_rubber_ducky: examples/rubber_ducky.py
facedancer_git.examples_rubber_ducky.code: |python
    import asyncio
    import logging

    from facedancer import main
    from facedancer.devices.keyboard     import USBKeyboardDevice
    from facedancer.classes.hid.keyboard import KeyboardModifiers

    device = USBKeyboardDevice()

    async def type_letters():
        logging.info("Beginning message typing demo...")

        # Type ls.
        await asyncio.sleep(5)
        await device.type_letters('l', 's', '\n')

        # Echo hi.
        await asyncio.sleep(2)
        await device.type_string("echo hi, user\n")

        # Finally, try to pop calc, just for fun.
        logging.info("Bonus: trying to pop calc.")
        await device.type_string('r', modifiers=KeyboardModifiers.MOD_LEFT_META)
        await asyncio.sleep(0.5)
        await device.type_string('calc\n')


        logging.info("Typing complete. Idly handling USB requests.")

    main(device, type_letters())
|

facedancer_git.examples_rubber_ducky.code -> facedancer_git.devices_keyboard: device = USBKeyboardDevice()


# - facedancer/devices/ -------------------------------------------------------

facedancer_git.devices_keyboard: facedancer/devices/keyboard.py - Keyboard Applet
facedancer_git.devices_keyboard: {
    USBKeyboardDevice: |python
        class USBKeyboardDevice(USBDevice):
            """ Simple USB keyboard device. """

            name           : str = "USB keyboard device"
            product_string : str = "Non-suspicious Keyboard"

            class KeyboardConfiguration(USBConfiguration):
                """ Primary USB configuration: act as a keyboard. """

                class KeyboardInterface(USBInterface):
                    """ Core HID interface for our keyboard. """
                    ...

                    class KeyEventEndpoint(USBEndpoint):
                        ...

                    #
                    # Raw descriptors
                    #
                    class USBClassDescriptor(USBClassDescriptor):
                        ...

                    class ReportDescriptor(HIDReportDescriptor):
                        ...

                    @class_request_handler(number=USBStandardRequests.GET_INTERFACE)
                    @to_this_interface
                    def handle_get_interface_request(self, request):
                        request.stall()

            def handle_data_requested(self, endpoint: USBEndpoint):
                """ Provide data once per host request. """
                ...

            #
            # User-facing API.
            #
            def key_down(self, code: KeyboardKeys):
                """ Marks a given key as pressed; should be a scancode from KeyboardKeys. """
                ...

            def key_up(self, code: KeyboardKeys):
                """ Marks a given key as released; should be a scancode from KeyboardKeys. """
                ...

            ...
    |
}
