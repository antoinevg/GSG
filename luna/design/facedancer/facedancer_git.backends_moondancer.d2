# TODO parse these
# $theme: 0
# $layout: dagre


facedancer_git: facedancer.git


# - facedancer/backends/ ------------------------------------------------------

facedancer_git.backends_moondancer: facedancer/backends/moondancer.py:MoondancerApp
# facedancer_git.backends_moondancer.MoondancerApp: {
#     shape: class
#     __init__(self, device=None, verbose=0, quirks=None)
#     init_commands(self): pass
#     get_version(): NotImplementedError
#     ack_status_stage(self, direction=HOST_TO_DEVICE, endpoint_number=0, blocking=False)
# }

facedancer_git.backends_moondancer: {
    __init__: |python
        def __init__(self, device=None, verbose=0, quirks=None):
            """
            Sets up a new GreatFET-backed Facedancer (GreatDancer) application.
            device: The GreatFET device that will act as our GreatDancer.
            verbose: The verbosity level of the given application.
            """

            import greatfet

            if device is None:
                device = greatfet.GreatFET()

            self.device = device

            self.device.comms.get_exclusive_access()

            FacedancerApp.__init__(self, device, verbose)
            self.connected_device = None

            # Grab the raw API object from the GreatFET object.
            # This has the low-level RPCs used for raw USB control.
            self.api = self.device.apis.greatdancer

            # Initialize a dictionary that will store the last setup
            # whether each endpoint is currently stalled.
            self.endpoint_stalled = {}
            for i in range(self.SUPPORTED_ENDPOINTS):
                self.endpoint_stalled[i] = False

            # Assume a max packet size of 64 until configured otherwise.
            self.max_ep0_packet_size = 64

            # Start off by assuming we're not waiting for an OUT control transfer's
            # data stage.  # See _handle_setup_complete_on_endpoint for details.
            self.pending_control_request = None

            # Store a reference to the device's active configuration,
            # which we'll use to know which endpoints we'll need to check
            # for data transfer readiness.
            self.configuration = None

            #
            # Store our list of quirks to handle.
            #
            if quirks:
                self.quirks = quirks
            else:
                self.quirks = []
    |
    service_irqs: |python
        def service_irqs(self):
            """
            Core routine of the Facedancer execution/event loop. Continuously monitors the
            GreatDancer's execution status, and reacts as events occur.
            """

            status = self._fetch_irq_status()

            # Other bits that may be of interest:
            # D_SRI = start of frame received
            # D_PCI = port change detect (switched between low, full, high speed state)
            # D_SLI = device controller suspend
            # D_UEI = USB error; completion of transaction caused error, see usb1_isr in firmware
            # D_NAKI = both the tx/rx NAK bit and corresponding endpoint NAK enable are set

            if status & self.USBSTS_D_UI:
                self._handle_setup_events()
                self._handle_transfer_events()

            if status & self.USBSTS_D_URI:
                self._bus_reset()

            if status & self.USBSTS_D_NAKI:
                self._handle_nak_events()
    |
    service_irqs -> _fetch_irq_status: self._fetch_irq_status()
    service_irqs -> _handle_setup_events: self._handle_setup_events()
    service_irqs -> _handle_transfer_events: self._handle_transfer_events()
    service_irqs -> _bus_reset: self._bus_reset()
    service_irqs -> _handle_nak_events: self._handle_nak_events()
    _fetch_irq_status: |python
        def _fetch_irq_status(self):
            """
            Fetch the USB controller's pending-IRQ bitmask, which indicates
            which interrupts need to be serviced.

            returns: A raw integer bitmap.
            """
            return self.api.get_status(self.GET_USBSTS)
    |
    _handle_setup_events: |python
        def _handle_setup_events(self):
            """
            Handles any outstanding setup events on the USB controller.
            """

            # Determine if we have setup packets on any of our endpoints.
            status = self._fetch_setup_status()

            # If we don't, abort.
            if not status:
                return

            # Otherwise, figure out which endpoints have outstanding setup events,
            # and handle them.
            for i in range(self.SUPPORTED_ENDPOINTS):
                if status & (1 << i):
                    self._handle_setup_event_on_endpoint(i)
    |
    _handle_setup_events -> _handle_setup_event_on_endpoint: self._handle_setup_event_on_endpoint(i)
    _handle_setup_event_on_endpoint: |python
        def _handle_setup_event_on_endpoint(self, endpoint_number):
            """
            Handles a known outstanding setup event on a given endpoint.

            endpoint_number: The endpoint number for which a setup event should be serviced.
            """

            # HACK: to maintain API compatibility with the existing facedancer API,
            # we need to know if a stall happens at any point during our handler.
            self.endpoint_stalled[endpoint_number] = False

            # Read the data from the SETUP stage...
            data    = bytearray(self.api.read_setup(endpoint_number))
            request = self.connected_device.create_request(data)

            # If this is an OUT request, handle the data stage,
            # and add it to the request.
            is_out   = request.get_direction() == self.HOST_TO_DEVICE
            has_data = (request.length > 0)

            # Special case: if this is an OUT request with a data stage, we won't
            # handle the request until the data stage has been completed. Instead,
            # we'll stash away the data received in the setup stage, prime the
            # endpoint for the data stage, and then wait for the data stage to
            # complete, triggering a corresponding code path in
            # in _handle_transfer_complete_on_endpoint.
            if is_out and has_data:
                self._prime_out_endpoint(endpoint_number)
                self.pending_control_request = request
                return

            self.connected_device.handle_request(request)

            if not is_out and not self.endpoint_stalled[endpoint_number]:
                self.ack_status_stage(direction=self.DEVICE_TO_HOST)
    |
    _handle_transfer_events: |python
    def _handle_transfer_events(self):
        """
        Handles any outstanding setup events on the USB controller.
        """

        # Determine if we have ready packets on any of our endpoints.
        status = self._fetch_transfer_status()

        # If we don't, abort.
        if not status:
            return

        # Figure out which endpoints have recently completed transfers,
        # and clean up any transactions on those endpoints. It's important
        # that this be done /before/ the _handle_transfer_complete... section
        # below, as those can generate further events which will need the freed
        # transfer descriptors.
        # [Note that it's safe to clean up the transfer descriptors before reading,
        #  here-- the GreatFET's USB controller has transparently moved any data
        #  from OUT transactions into a holding buffer for us. Nice of it!]
        for i in range(self.SUPPORTED_ENDPOINTS):
            if status & (1 << i):
                self._clean_up_transfers_for_endpoint(i, self.HOST_TO_DEVICE)

            if status & (1 << (i + 16)):
                self._clean_up_transfers_for_endpoint(i, self.DEVICE_TO_HOST)

        # Now that we've cleaned up all relevant transfer descriptors, trigger
        # any events that should occur due to the completed transaction.
        for i in range(self.SUPPORTED_ENDPOINTS):
            if status & (1 << i):
                self._handle_transfer_complete_on_endpoint(i, self.HOST_TO_DEVICE)

            if status & (1 << (i + 16)):
                self._handle_transfer_complete_on_endpoint(i, self.DEVICE_TO_HOST)


        # Finally, after completing all of the above, we may now have idle
        # (unprimed) endpoints. For OUT endpoints, we'll need to re-prime them
        # so we're ready for receipt; for IN endpoints, we'll want to give the
        # emulated device a chance to provide new data.
        self._handle_transfer_readiness()
    |
    _bus_reset: |python
        def _bus_reset(self):
            """
            Triggers the GreatDancer to perform its side of a bus reset.
            """

            logging.debug("Host issued bus reset.")

            if self.connected_device:
                self.connected_device.handle_bus_reset()
            else:
                self.api.bus_reset()
    |
    _handle_nak_events: |python
        def _handle_nak_events(self):
            """
            Handles an event in which the GreatDancer has NAK'd an IN token.
            """

            # If we haven't been configured yet, we can't have any
            # endpoints other than the control endpoint, and we don't need to
            # handle any NAKs.
            if not self.configuration:
                return

            # Fetch the endpoint status.
            status = self._fetch_endpoint_nak_status()

            # Iterate over each usable endpoint.
            for interface in self.configuration.get_interfaces():
                for endpoint in interface.get_endpoints():

                    # If the endpoint has NAK'd, issued the relevant callback.
                    if self._has_issued_nak(status, endpoint.number, endpoint.direction):
                        self.connected_device.handle_nak(endpoint.number)
    |
}
