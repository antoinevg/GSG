$theme: 0
$layout: elk


facedancer_git: facedancer.git

# - examples/ -----------------------------------------------------------------
$include: facedancer_git.examples_rubber_ducky.d2

facedancer_git.examples_rubber_ducky.code -> facedancer_git.devices_init.default_main: main(device, type_letters())


# - facedancer/devices/ -------------------------------------------------------

facedancer_git.devices_init: facedancer/devices/__init__.py
facedancer_git.devices_init: {
    default_main: |python
        def default_main(device_or_type, *coroutines):
            """ Simple, default main for FaceDancer emulation.

            Parameters:
                device_type -- The USBDevice type to emulate.
            """

            # Instantiate the relevant device, and connect it to our host.
            parser = argparse.ArgumentParser(description=f"Emulation frontend for {device_or_type.name}(s).")
            parser.add_argument('--print-only', action='store_true', help="Prints information about the device without emulating.")
            parser.add_argument('--suggest', action='store_true', help="Prints suggested code additions after device emualtion is complete.")
            parser.add_argument('-v', '--verbose', help="Controls verbosity. 0=silent, 3=default, 5=spammy", default=3)
            args = parser.parse_args()

            if sys.stdout.isatty():
                log_format = LOG_FORMAT_COLOR
            else:
                log_format = LOG_FORMAT_PLAIN

            # Set up our logging output.
            python_loglevel = 50 - (int(args.verbose) * 10)
            logging.basicConfig(level=python_loglevel, format=log_format)

            if inspect.isclass(device_or_type):
                device = device_or_type()
            else:
                device = device_or_type

            if args.print_only:
                pprint.pprint(device)
                sys.exit(0)

            # Run the relevant code, along with any added coroutines.
            device.emulate(*coroutines)

            if args.suggest:
                device.print_suggested_additions()
    |
}

facedancer_git.devices_init.default_main -> facedancer_git.future_device.USBBaseDevice.emulate: device.emulate(*coroutines)

# - facedancer/future/ --------------------------------------------------------

facedancer_git.future_device: facedancer/future/device.py
facedancer_git.future_device.USBBaseDevice: {
    style: {
        fill: lightgreen
    }
    emulate: |python
        def emulate(self, *coroutines: Iterable[asyncio.coroutine]):
            """ Convenience method that runs a full method in a blocking manner.
            Performs connect, run, and then disconnect.

            Parameters:
                *coroutines -- any asyncio coroutines to be executed concurrently
                               with our emulation
            """

            self.connect()

            try:
                self.run_with(*coroutines)
            except KeyboardInterrupt:
                pass
            finally:
                self.disconnect()

    |
    run_with: |python
        def run_with(self, *coroutines: Iterable[asyncio.coroutine]):
            """
            Runs the actual device emulation synchronously; running any provided
            coroutines simultaneously.
            """

            async def inner():
                await asyncio.gather(self.run(), *coroutines)

            asyncio.run(inner())
    |
    run: |python
        async def run(self):
            """ Runs the actual device emulation. """

            # Sanity check to avoid common issues.
            if len(self.configurations) == 0:
                logging.error("No configurations defined on the emulated device! "
                        "Did you forget @use_inner_classes_automatically?")

            if self.backend is None:
                self.connect()

            # Constantly service any events that need to be performed.
            while True:
                self.backend.service_irqs()
                await asyncio.sleep(0)
    |

    emulate -> run_with: self.run_with(*coroutines)
    run_with -> run: await asyncio.gather(self.run(), *coroutines)
}

facedancer_git.future_device.USBBaseDevice.run -> facedancer_git.backends_moondancer.service_irqs: self.backend.service_irqs()



# - facedancer/backends/ ------------------------------------------------------

$include: facedancer_git.backends_moondancer.d2

facedancer_git.backends_moondancer.__init__ -- greatfet_git.host_greatfet.__init__: self.device = greatfet.GreatFET()
facedancer_git.backends_moondancer.__init__ -- libgreat_git.pygreat.GreatBoard.__init__: self.api = self.device.apis.greatdancer

facedancer_git.backends_moondancer._handle_setup_event_on_endpoint -> greatfet_git.firmware_greatfet_usb_classes_greatdancer: {
    label: self.api.read_setup(endpoint_number)
    style: {
        font-size: 24
        stroke-width: 5
        stroke: green
    }
}


# - libgreat.git/host/pygreat/board.py -------------------------------

libgreat_git: libgreat.git

$include: libgreat_git.pygreat.d2


# - greatfet.git/host/greatfet/greatfet.py ------------------------------------

greatfet_git: greatfet.git

$include: greatfet_git.host_greatfet.d2

# - greatfet.git/host/greatfet/greatfet.py ------------------------------------

greatfet_git.host_greatfet: greatfet.git/host/greatfet/greatfet.py
greatfet_git.host_greatfet: {
    __init__: |python
        def GreatFET(**board_identifiers):
            """
            Attempts to create a new instance of GreatFET board (sub)class
            most applicable to the given device. For example, if the attached
            board is a GreatFET One, this will automatically create a
            GreatFETOne object.

            Accepts the same arguments as pyusb's usb.find() method, allowing narrowing
            to a more specific GreatFET by e.g. serial number. Like usb.find(), providing
            find_all will return a list of all found devices.

            Throws a DeviceNotFoundError if no device is avaiable and find_all is not set.
            """

            if 'find_all' in board_identifiers and board_identifiers['find_all']:
                del board_identifiers['find_all']
                return GreatFETBoard.autodetect_all(**board_identifiers)
            else:
                return GreatFETBoard.autodetect(**board_identifiers)
    |
}


greatfet_git.host_greatfet.TODO
greatfet_git.host_greatfet.TODO.text: |
    greatfet host-side python library - Show Commands under host/greatfet/ ...
|


# - greatfet.git/firmware/greatfet_usb/classes/greatdancer.c ------------------

greatfet_git.firmware_greatfet_usb_classes_greatdancer: greatfet.git/firmware/greatfet_usb/classes/greatdancer.c
greatfet_git.firmware_greatfet_usb_classes_greatdancer: {
    read_setup: |c
        /**
         * Reads a setup packet from the GreatDancer port and relays it to the host.
         * The index parameter specifies which endpoint we should be reading from.
         *
         * Always transmits an 8-byte setup packet back to the host. If no setup packet
         * is waiting, the results of this vendor request are unspecified.
         */
        static int greatdancer_verb_read_setup(struct command_transaction *trans)
        {
            uint_fast8_t address;

            usb_setup_t *setup_data;
            usb_endpoint_t *target_endpoint;

            int endpoint_number = comms_argument_parse_uint8_t(trans);

            if (!comms_transaction_okay(trans)) {
                return EBADMSG;
            }

            // Figure out the endpoint we\'re reading setup data from...
            address = usb_endpoint_address(USB_TRANSFER_DIRECTION_OUT, endpoint_number);
            target_endpoint = usb_endpoint_from_address(address, &usb_peripherals[1]);

            if (!target_endpoint) {
                pr_error("greatdancer: trying to read a setup packet from an impossible endpoint %x!\n", address);
            }

            // ... and find its setup data.
            setup_data = (usb_setup_t *)usb_queue_head(target_endpoint->address, target_endpoint->device)->setup;

            // Validate that we got a sane pointer from the USB stack.
            if (!setup_data) {
                pr_error("greatdancer: internal error -- USB API passed us a NULL setup packet pointer!\n");
                return EFAULT;
            }

            // Reserve space for the target data...
            comms_response_add_raw(trans, setup_data, sizeof(*setup_data));

            // workaround for issue 344 (https://github.com/greatscottgadgets/greatfet/issues/344)
            usb_queue_flush_endpoint(target_endpoint->in);
            usb_queue_flush_endpoint(target_endpoint->out);

            // ... and mark that packet as handled.
            usb_clear_endpoint_setup_status(1 << endpoint_number, &usb_peripherals[1]);

            return 0;
        }
    |
}
